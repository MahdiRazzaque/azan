// src/config/config-validator.js
import { config } from 'dotenv';

// Load environment variables
config();

/**
 * Validate environment variables
 * @returns {boolean} - Whether environment variables are valid
 */
function validateEnv() {
    if (!process.env.ADMIN_USERNAME || !process.env.ADMIN_PASSWORD_HASH) {
        console.error("Error: ADMIN_USERNAME and ADMIN_PASSWORD_HASH are required in .env file");
        process.exit(1); // Exit if critical env vars are missing
    }
    if (!process.env.SALT) {
        console.warn("Warning: SALT environment variable is not set. This is crucial for password security. A default might be used or generated by hashing logic, but it's best to set a persistent one.");
        // Depending on your security model, you might want to make this an error:
        // console.error("Error: SALT environment variable is required in .env file for password security.");
        // process.exit(1);
    }
    // Add check for VOICEMONKEY_TOKEN if it's absolutely critical for startup
    if (!process.env.VOICEMONKEY_TOKEN) {
        console.warn("Warning: VOICEMONKEY_TOKEN is not set in .env file. Alexa announcements will fail.");
    }
    return true;
}

/**
 * Validate configuration object (from file or otherwise)
 * @param {Object} configToValidate - Config object to validate
 * @returns {boolean} - Whether configuration is valid
 */
function validateConfig(configToValidate) {
    try {
        // Check if config exists
        if (!configToValidate) {
            console.error("❌ Error: Configuration object is null or undefined.");
            return false;
        }
        
        // Check if config is an empty object
        if (Object.keys(configToValidate).length === 0) {
            console.error("❌ Error: Configuration object is empty.");
            return false;
        }
        
        // Validate prayer data configuration
        if (!configToValidate.prayerData) {
            console.error("❌ Error: prayerData configuration is missing");
            return false;
        }

        // Check if prayerData has a source property
        if (!configToValidate.prayerData.source) {
            console.error("❌ Error: prayerData.source is missing");
            return false;
        }

        // Check if source is valid
        if (!['mymasjid', 'aladhan'].includes(configToValidate.prayerData.source)) {
            console.error(`❌ Error: prayerData.source must be either 'mymasjid' or 'aladhan', got '${configToValidate.prayerData.source}'`);
            return false;
        }

        // Check MyMasjid specific configuration
        if (configToValidate.prayerData.source === 'mymasjid') {
            if (!configToValidate.prayerData.mymasjid) {
                console.error("❌ Error: prayerData.mymasjid is missing");
                return false;
            }
            if (!configToValidate.prayerData.mymasjid.guildId) {
                console.error("❌ Error: prayerData.mymasjid.guildId is missing");
                return false;
            }
        }
        
        // Check Aladhan specific configuration
        if (configToValidate.prayerData.source === 'aladhan') {
            if (!configToValidate.prayerData.aladhan) {
                console.error("❌ Error: prayerData.aladhan is missing");
                return false;
            }
            // We could add more specific checks here, but that's handled by aladhan-provider.js
        }

        // Check for features section (optional, create default if missing)
        if (!configToValidate.features) {
            console.warn("⚠️ Warning: features configuration is missing, will use defaults");
            // Don't return false, as we can use defaults
        }
        
        // Check for auth section (optional, create default if missing)
        if (!configToValidate.auth) {
            console.warn("⚠️ Warning: auth configuration is missing, will use defaults");
            // Don't return false, as we can use defaults
        }
        
        // Check for prayerSettings section (optional, create default if missing)
        if (!configToValidate.prayerSettings) {
            console.warn("⚠️ Warning: prayerSettings configuration is missing, will use defaults");
            // Don't return false, as we can use defaults
        } else if (!configToValidate.prayerSettings.prayers) {
            console.warn("⚠️ Warning: prayerSettings.prayers configuration is missing, will use defaults");
            // Don't return false, as we can use defaults
        }

        return true;
    } catch (error) {
        console.error('❌ Failed to validate configuration:', error);
        return false;
    }
}

// Export functions
export { validateEnv, validateConfig };